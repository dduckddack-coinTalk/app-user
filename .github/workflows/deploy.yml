name: app-user-deploy

on:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          mysql version: "8.0"
          mysql database: ${{ secrets.MYSQL_DATABASE }}
          mysql user: ${{ secrets.MYSQL_USER }}
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

      - name: Set r2dbc setting
        run: |
          touch ./src/main/resources/application.properties
          echo spring.r2dbc.url=r2dbc:mysql://localhost:3306/${{ secrets.MYSQL_DATABASE }}?characterEncoding=utf8 >> ./src/main/resources/application.properties
          echo spring.r2dbc.username=${{ secrets.MYSQL_USER }} >> ./src/main/resources/application.properties
          echo spring.r2dbc.password=${{ secrets.MYSQL_PASSWORD }} >> ./src/main/resources/application.properties
          echo secret=${{ secrets.TOKEN_SECRET }} >> ./src/main/resources/application.properties
          echo accessExpire=${{ secrets.TOKEN_ACCESSEXPIRE }} >> ./src/main/resources/application.properties
          echo refreshExpire=${{ secrets.TOKEN_REFRESHEXPIRE }} >> ./src/main/resources/application.properties          
          echo spring.mail.host=smtp.gmail.com >> ./src/main/resources/application.properties
          echo spring.mail.port=587 >> ./src/main/resources/application.properties
          echo spring.mail.username=${{ secrets.MAIL_USERNAME }} >> ./src/main/resources/application.properties
          echo spring.mail.password=${{ secrets.MAIL_PASSWORD }} >> ./src/main/resources/application.properties
          echo spring.mail.properties.mail.smtp.auth=true >> ./src/main/resources/application.properties
          echo spring.mail.properties.mail.smtp.starttls.enable=true >> ./src/main/resources/application.properties
          echo spring.thymeleaf.cache=false >> ./src/main/resources/application.properties
          echo spring.thymeleaf.enabled=true >> ./src/main/resources/application.properties
          echo spring.thymeleaf.prefix=classpath:/templates/ >> ./src/main/resources/application.properties
          echo spring.thymeleaf.suffix=.html >> ./src/main/resources/application.properties
          echo cloud.aws.s3.bucket=codetalk-user-image >> ./src/main/resources/application.properties
          echo cloud.aws.credentials.access-key=${{ secrets.CREDENTIALS_ACCESS_KEY }} >> ./src/main/resources/application.properties
          echo cloud.aws.credentials.secret-key=${{ secrets.CREDENTIALS_SECRET_KEY }} >> ./src/main/resources/application.properties
          echo cloud.aws.region.static=ap-northeast-2 >> ./src/main/resources/application.properties
          echo cloud.aws.region.auto=false >> ./src/main/resources/application.properties
          echo cloud.aws.stack.auto=false >> ./src/main/resources/application.properties
          echo cloud.aws.s3.bucket.url=https://codetalk-user-image.s3.ap-northeast-2.amazonaws.com/ >> ./src/main/resources/application.properties
          echo cloud.aws.s3.bucket.my.download.url=https://codetalk-user-image.s3.ap-northeast-2.amazonaws.com/ >> ./src/main/resources/application.properties

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: build

        # 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy

        # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

        # script 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

        # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      #      # 파일 압축
      - name: Make zip file
        run: zip ./codetalk-user-githubaction.zip -r ./deploy

        # Deploy
      - name: Deploy
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3!
        run: aws s3 cp --region ap-northeast-2 --acl private ./codetalk-user-githubaction.zip s3://codetalk-user-s3/

      - name: CodeDeploy!
        run: aws deploy create-deployment --application-name codetalk-user-githubaction --deployment-group-name codetalk-user-githubaction-group --s3-location bucket=codetalk-user-s3,key=codetalk-user-githubaction.zip,bundleType=zip
